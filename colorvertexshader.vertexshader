#version 410 core
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor;
layout(location = 2) in vec3 vertexNormal_modelspace;
uniform mat4 TRANS;
uniform mat4 SCALE;
uniform mat4 PROJECTION;
uniform mat4 VIEW;

out vec3 position_worldspace;
out vec3 normal_cameraspace;
out vec3 lightdirection_cameraspace;
out vec3 eyedirection_cameraspace;

void main(){
	vec4 v = vec4(vertexPosition_modelspace, 1);
	mat4 MODEL = TRANS * SCALE;
	mat4 MVP = PROJECTION * VIEW * MODEL;
	gl_Position = MVP * v;
	position_worldspace = (MODEL * v).xyz;
	vec3 position_cameraspace = (VIEW * MODEL * v).xyz;
	eyedirection_cameraspace = vec3(0,0,0) - position_cameraspace;
	vec3 lightposition_cameraspace = (VIEW * vec4(0,0,10,1)).xyz;
	lightdirection_cameraspace = lightposition_cameraspace + eyedirection_cameraspace;
	normal_cameraspace = ( VIEW * MODEL * vec4(vertexNormal_modelspace,0)).xyz;
}
